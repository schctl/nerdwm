//! Error types.

/// Errors generated by XCB.
#[derive(Debug, thiserror::Error)]
pub enum XcbError {
    #[error("{0}")]
    Generic(#[from] xcb::GenericError),
    #[error("{0}")]
    Connection(#[from] xcb::ConnError),
    #[error("{0}")]
    Atom(#[from] xcb::Error<xcb::ffi::xcb_atom_error_t>),
    #[error("{0}")]
    Reply(#[from] xcb::ReplyError),
}

impl From<xcb::AtomError> for XcbError {
    fn from(other: xcb::AtomError) -> Self {
        Self::Atom(other.base)
    }
}

/// All error types.
#[derive(Debug, thiserror::Error)]
pub enum Error {
    /// XCB errors.
    #[error(transparent)]
    Xcb(XcbError),
    /// Other errors.
    #[error("{0}")]
    Other(String),
    /// Static errors messages.
    #[error("{0}")]
    Static(&'static str),
}

impl<T: Into<XcbError>> From<T> for Error {
    fn from(other: T) -> Self {
        Self::Xcb(other.into())
    }
}

pub type NerdResult<T> = Result<T, Error>;
